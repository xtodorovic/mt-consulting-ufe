/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Consulting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xtodorovic@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Consultation,
  ConsultationUpdate,
} from '../models';
import {
    ConsultationFromJSON,
    ConsultationToJSON,
    ConsultationUpdateFromJSON,
    ConsultationUpdateToJSON,
} from '../models';

export interface DeleteConsultationRequest {
    requestId: string;
}

export interface GetRequestsListEntriesRequest {
    requestId: string;
}

export interface SubmitConsultingFormRequest {
    consultation: Consultation;
}

export interface UpdateConsultationRequest {
    requestId: string;
    consultationUpdate: ConsultationUpdate;
}

/**
 * ConsultationsApi - interface
 * 
 * @export
 * @interface ConsultationsApiInterface
 */
export interface ConsultationsApiInterface {
    /**
     * 
     * @summary Delete consultation
     * @param {string} requestId ID of the consultation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApiInterface
     */
    deleteConsultationRaw(requestParameters: DeleteConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete consultation
     */
    deleteConsultation(requestParameters: DeleteConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get list of all entries in ambulance waiting list
     * @summary Provides the requests list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApiInterface
     */
    getAllRequestsListEntriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Consultation>>>;

    /**
     * Get list of all entries in ambulance waiting list
     * Provides the requests list
     */
    getAllRequestsListEntries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Consultation>>;

    /**
     * By using requestId you get list of entries in waiting list
     * @summary Provides the requests list
     * @param {string} requestId pass the id of the particular request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApiInterface
     */
    getRequestsListEntriesRaw(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Consultation>>>;

    /**
     * By using requestId you get list of entries in waiting list
     * Provides the requests list
     */
    getRequestsListEntries(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Consultation>>;

    /**
     * 
     * @summary Submit a new consultation request
     * @param {Consultation} consultation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApiInterface
     */
    submitConsultingFormRaw(requestParameters: SubmitConsultingFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Submit a new consultation request
     */
    submitConsultingForm(requestParameters: SubmitConsultingFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update consultation with time and video link
     * @param {string} requestId ID of the consultation request
     * @param {ConsultationUpdate} consultationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApiInterface
     */
    updateConsultationRaw(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update consultation with time and video link
     */
    updateConsultation(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ConsultationsApi extends runtime.BaseAPI implements ConsultationsApiInterface {

    /**
     * Delete consultation
     */
    async deleteConsultationRaw(requestParameters: DeleteConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling deleteConsultation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/consultation/{requestId}/delete`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete consultation
     */
    async deleteConsultation(requestParameters: DeleteConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConsultationRaw(requestParameters, initOverrides);
    }

    /**
     * Get list of all entries in ambulance waiting list
     * Provides the requests list
     */
    async getAllRequestsListEntriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Consultation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/consultations-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConsultationFromJSON));
    }

    /**
     * Get list of all entries in ambulance waiting list
     * Provides the requests list
     */
    async getAllRequestsListEntries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Consultation>> {
        const response = await this.getAllRequestsListEntriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * By using requestId you get list of entries in waiting list
     * Provides the requests list
     */
    async getRequestsListEntriesRaw(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Consultation>>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getRequestsListEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/consultations-list/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConsultationFromJSON));
    }

    /**
     * By using requestId you get list of entries in waiting list
     * Provides the requests list
     */
    async getRequestsListEntries(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Consultation>> {
        const response = await this.getRequestsListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit a new consultation request
     */
    async submitConsultingFormRaw(requestParameters: SubmitConsultingFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.consultation === null || requestParameters.consultation === undefined) {
            throw new runtime.RequiredError('consultation','Required parameter requestParameters.consultation was null or undefined when calling submitConsultingForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/consultation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsultationToJSON(requestParameters.consultation),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submit a new consultation request
     */
    async submitConsultingForm(requestParameters: SubmitConsultingFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.submitConsultingFormRaw(requestParameters, initOverrides);
    }

    /**
     * Update consultation with time and video link
     */
    async updateConsultationRaw(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling updateConsultation.');
        }

        if (requestParameters.consultationUpdate === null || requestParameters.consultationUpdate === undefined) {
            throw new runtime.RequiredError('consultationUpdate','Required parameter requestParameters.consultationUpdate was null or undefined when calling updateConsultation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/consultation/{requestId}/edit`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConsultationUpdateToJSON(requestParameters.consultationUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update consultation with time and video link
     */
    async updateConsultation(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateConsultationRaw(requestParameters, initOverrides);
    }

}
