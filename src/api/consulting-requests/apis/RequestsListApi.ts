/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Consulting Waiting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xtodorovic@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WaitingListEntry,
} from '../models';
import {
    WaitingListEntryFromJSON,
    WaitingListEntryToJSON,
} from '../models';

export interface GetRequestsListEntriesRequest {
    requestId: string;
}

/**
 * RequestsListApi - interface
 * 
 * @export
 * @interface RequestsListApiInterface
 */
export interface RequestsListApiInterface {
    /**
     * By using requestId you get list of entries in ambulance waiting list
     * @summary Provides the requests list
     * @param {string} requestId pass the id of the particular request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsListApiInterface
     */
    getRequestsListEntriesRaw(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WaitingListEntry>>>;

    /**
     * By using requestId you get list of entries in ambulance waiting list
     * Provides the requests list
     */
    getRequestsListEntries(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WaitingListEntry>>;

}

/**
 * 
 */
export class RequestsListApi extends runtime.BaseAPI implements RequestsListApiInterface {

    /**
     * By using requestId you get list of entries in ambulance waiting list
     * Provides the requests list
     */
    async getRequestsListEntriesRaw(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WaitingListEntry>>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getRequestsListEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/requests-list/{requestId}/entries`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WaitingListEntryFromJSON));
    }

    /**
     * By using requestId you get list of entries in ambulance waiting list
     * Provides the requests list
     */
    async getRequestsListEntries(requestParameters: GetRequestsListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WaitingListEntry>> {
        const response = await this.getRequestsListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
