/* tslint:disable */
/* eslint-disable */
/**
 * Consultation Edit API
 * Allows editing of a consultation request (e.g., assigning time and video link)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xtodorovic@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConsultationUpdate,
} from '../models';
import {
    ConsultationUpdateFromJSON,
    ConsultationUpdateToJSON,
} from '../models';

export interface UpdateConsultationRequest {
    requestId: string;
    consultationUpdate: ConsultationUpdate;
}

/**
 * ConsultationEditApi - interface
 * 
 * @export
 * @interface ConsultationEditApiInterface
 */
export interface ConsultationEditApiInterface {
    /**
     * 
     * @summary Update consultation with time and video link
     * @param {string} requestId ID of the consultation request
     * @param {ConsultationUpdate} consultationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationEditApiInterface
     */
    updateConsultationRaw(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update consultation with time and video link
     */
    updateConsultation(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ConsultationEditApi extends runtime.BaseAPI implements ConsultationEditApiInterface {

    /**
     * Update consultation with time and video link
     */
    async updateConsultationRaw(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling updateConsultation.');
        }

        if (requestParameters.consultationUpdate === null || requestParameters.consultationUpdate === undefined) {
            throw new runtime.RequiredError('consultationUpdate','Required parameter requestParameters.consultationUpdate was null or undefined when calling updateConsultation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/consultation-form/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConsultationUpdateToJSON(requestParameters.consultationUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update consultation with time and video link
     */
    async updateConsultation(requestParameters: UpdateConsultationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateConsultationRaw(requestParameters, initOverrides);
    }

}
